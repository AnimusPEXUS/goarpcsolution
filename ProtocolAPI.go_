package goarpcsolution

// use ProtocolAPI to describe a set of functions, provided by your service

import (
	"encoding/json"
)

type ProtocolAPI struct {
	Name        string                `json:"n"`
	Description string                `json:"d"`
	Functions   []ProtocolAPIFunction `json:"f"`
}

type ProtocolAPIFunction struct {
	Name            string                              `json:"n"`  // identifier
	ParametersNamed []ProtocolAPIFunctionParameterNamed `json:"pn"` // what client may send
	Result          ProtocolFunctionResult              `json:"r"`  // what client should expect
	// ParametersPositionalConfig ParametersPositionalConfig          `json:"ppc"`
	// ParametersPositional       []ProtocolAPIFunctionParameterNamed `json:"pp"`
}

// ------- function parameters formalization

type ProtocolAPIFunctionParameterNamed struct {
	Name     string                           `json:"n"`
	Type     ProtocolAPIFunctionParameterType `json:"t"`
	Optional bool                             `json:"o"`
}

// type ParametersPositionalConfig struct {
// 	HaveMinCount bool `json:"hmic"`
// 	MinCount     int  `json:"mic"`
// 	HaveMaxCount bool `json:"hmac"`
// 	MaxCount     int  `json:"mac"`
// }

// type ProtocolAPIFunctionParameterPositional struct {
// 	Type ProtocolAPIFunctionParameterType `json:"t"`
// }

type ProtocolAPIFunctionParameterType uint8

const (
	// standard-size values
	PT_Invalid ProtocolAPIFunctionParameterType = 0
	PT_Boolean                                  = 1
	PT_Integer                                  = 2
	PT_Float                                    = 3

	// potentially large value, parts of which can be accessed and retrieved selectively
	PT_StringUTF8 = 4
	PT_BytesFixed = 5

	// stream value, which potentially may be endless. it's data if retrieved in FIFO fashion
	PT_BytesStream = 6
)

// ------- function result formalization

type ProtocolAPIFunctionResultType uint8

// probably this should be in sync with ProtocolAPIFunctionParameterType

type ProtocolFunctionResult struct {
	Type ProtocolAPIFunctionResultType `json:"type"`
}

func (self *ProtocolAPI) MarshalIndent() (string, error) {
	var ret string

	ret_b, err := json.MarshalIndent(self, "  ", "  ")
	if err != nil {
		return "", err
	}

	ret = string(ret_b)

	return ret, nil
}

func (self *ProtocolAPI) Marshal() (string, error) {
	var ret string

	ret_b, err := json.Marshal(self)
	if err != nil {
		return "", err
	}

	ret = string(ret_b)

	return ret, nil
}
